sprite,ISpriteState,SpriteComponent

export interface ISpriteState {
  asset: IAsset
}

export class SpriteComponent extends Component<ISpriteState, Physics, IComponents> {
  static defaultState = {
    asset: {
      url: 'none'
    }
  }

  sprite?: PIXI.Sprite
  debugPoint?: PIXI.Graphics

  static assetsToLoad = (state: ISpriteState): IAsset[] => {
    return [
      state.asset
    ]
  }

  getPos?: LensFunction<PositionComponent>
  getScreen?: LensFunction<ScreenAttributesComponent>
  addToWorldPartTwo = () => {
    this.sprite = new PIXI.Sprite(this.world.getTexture(this.state.asset))
    this.world.container.addChild(this.sprite)
    this.getPos = positionLens(this.world)
    this.getScreen = screenLens(this.world)

    this.debugPoint = new PIXI.Graphics()
    this.debugPoint.lineStyle(2, 0xFF0000, 1)
    this.debugPoint.moveTo(-4, -4)
    this.debugPoint.lineTo(4,4)
    this.debugPoint.moveTo(-4,4)
    this.debugPoint.lineTo(4,-4)
    this.sprite.addChild(this.debugPoint)
  }

  removeFromWorldPartTwo = () => {
    this.world.container.removeChild(this.sprite)
    this.sprite = null
    this.getPos = null
    this.getScreen = null
  }

  tick = (timeElapsed: number) => {
    const pos = this.actor.components.position
    const screen = this.world.root.components.screen
    if (!this.sprite || !pos || !this.getPos || !screen) {
      return
    }

    const cameraPos = this.getPos(CAMERA)
    if (!cameraPos) {
      return
    }

    const { x, y } = screen.pixelsFromWorld({
      x: pos.state.x - cameraPos.state.x,
      y: pos.state.y - cameraPos.state.y,
    })

    this.sprite.x = x 
    this.sprite.y = y
  }
}
