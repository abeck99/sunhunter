follow,IFollowState,FollowComponent

export interface IFollowState {
  t?: string
  d?: number
}

export class FollowComponent extends Component<IFollowState, Physics, IComponents> {
  static defaultState = {
    t: null,
    d: 0.5,
  }

  getPos?: LensFunction<IPositionState>
  addToWorldPartTwo = () => {
    this.getPos = positionStateLens(this.world)
  }
  removeFromWorldPartTwo = () => {
    this.getPos = null
  }

  tick = (timeElapsed: number) => {
    const myPos = this.actor.components.position
    if (!myPos || !this.getPos) {
      return
    }

    const targetPos = this.getPos(this.state.t)
    if (!targetPos) {
      return
    }

    const d = this.state.d
    const dI = 1.0 - d
    myPos.state.x = (myPos.state.x*d) + (targetPos.x*dI)
    myPos.state.y = (myPos.state.y*d) + (targetPos.y*dI)
  }
}
