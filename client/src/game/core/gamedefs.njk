import { IComponentClass, IAsset } from './core/types'
import * as PIXI from "pixi.js"
import * as R from 'ramda'


export class Component<TComponentState, TComponents> implements IComponent<TComponentState, TComponents> {
  actor: IActor<TComponents>
  world?: IWorld<TComponents>
  state: TComponentState

  constructor(actor: IActor<TComponents>, state: TComponentState) {
    this.actor = actor
    this.loaded = false
    this.wasAddedToWorld = false
    this.state = state
  }

  loaded: boolean
  wasAddedToWorld: boolean

  shouldBeInWorld = (): boolean => {
    return this.world && this.loaded
  }

  dispatchAddRemoveIfNeeded = () => {
    if (!this.wasAddedToWorld && this.shouldBeInWorld()) {
      this.wasAddedToWorld = true
      this.addToWorldPartTwo()
    } else if (this.wasAddedToWorld && !this.shouldBeInWorld()) {
      this.wasAddedToWorld = false
      this.removeFromWorldPartTwo()
    }
  }

  addToWorldPartTwo = () => {
    console.log("SHOLDNO BE HERE")
  }
  removeFromWorldPartTwo = () => {}

  setWorld = (world: IWorld<TComponents>) => {
    this.world = world
    this.dispatchAddRemoveIfNeeded()
  }

  setLoaded = (isLoaded: boolean) => {
    this.loaded = isLoaded
    this.dispatchAddRemoveIfNeeded()
  }

  tick = (elapsedTime: number) => {}

  getState = (): TComponentState => {
    return this.state
  }
}


{% for component in components %}
{{ component.body }}
{
 const _: IComponentClass<{{ component.state }}, IComponents, {{ component.className }}> = {{ component.className }}
}
{% endfor %}


export interface IComponentsState {
{% for component in components %}
{{ component.name }}?: {{ component.state }}
{% endfor %}
}

export interface IComponents {
{% for component in components %}
{{ component.name }}?: {{ component.className }}
{% endfor %}
}

const componentClasses = {
{% for component in components %}
{{ component.name }}: {{ component.className }},
{% endfor %}
}



// Concrete classes using definitions
import { ActorFactory } from './core/actors'
import { World, IWorldConfig } from './core/world'
import { IActor, IWorld, IComponent, IActorState } from './core/types'

export class Actor implements IActor<IComponents> {
  uuid: string
  components: IComponents

  static defaults: IComponentsState = {}

  constructor(uuid: string) {
    this.uuid = uuid
    this.components = {}
  }

  getState = <TComponentsState>(): IActorState<TComponentsState> => {
    var state = {} as TComponentsState

    R.mapObjIndexed((component, componentName) => {
      state[componentName] = component.getState()
    }, this.components)

    return {
      uuid: this.uuid,
      state: state,
    }
  }
}

export const factory = new ActorFactory<IComponents>(componentClasses)
export const makeWorld = (worldConfig: IWorldConfig): World<IComponents> => {
  return new World<IComponents>(worldConfig, factory)
}


