import { IComponentClass, IAsset } from './core/types'
import * as PIXI from "pixi.js"


export class Component<TComponentConfig, TComponents> implements IComponent<TComponentConfig, TComponents> {
  actor: IActor<TComponents>
  world?: IWorld<TComponents>
  config?: TComponentConfig
  didCallHasWorldAndConfig: boolean

  constructor(actor: IActor<TComponents>, config: TComponentConfig) {
    this.actor = actor
    this.didCallHasWorldAndConfig = false
    this.init(config)
  }

  hasWorldAndConfig_ = () => {

  }
  hasWorldAndConfig = () => {
    this.hasWorldAndConfig_()
  }

  checkIfHasWorldAndConfig = () => {
    if (!this.didCallHasWorldAndConfig && this.world && this.config) {
      this.didCallHasWorldAndConfig = true
      this.hasWorldAndConfig()
    }
  }

  init_ = (config: TComponentConfig) => {
    this.config = config
    this.checkIfHasWorldAndConfig()
  }
  init = (config: TComponentConfig) => {
    this.init_(config)
  }

  addToWorld_ = (world: IWorld<TComponents>) => {
    this.world = world
    this.checkIfHasWorldAndConfig()
  }
  addToWorld = (world: IWorld<TComponents>) => {
    this.addToWorld_(world)
  }

  removeFromWorld_ = (world: IWorld<TComponents>) => {
    this.world = null
  }
  removeFromWorld = (world: IWorld<TComponents>) => {
    this.removeFromWorld_(world)
  }

  tick_ = (elapsedTime: number) => {}
  tick = (elapsedTime: number) => {
    this.tick_(elapsedTime)
  }
}


{% for component in components %}
{{ component.body }}
{% endfor %}



// Component definitions
// import { ISpriteConfig, SpriteComponent } from './components/sprite'

export interface IConfig {
{% for component in components %}
{{ component.name }}?: {{ component.config }}
{% endfor %}
}

export interface IComponents {
{% for component in components %}
{{ component.name }}?: {{ component.className }}
{% endfor %}
}

const componentClasses = {
{% for component in components %}
{{ component.name }}: {{ component.className }},
{% endfor %}
}



// Concrete classes using definitions
import { ActorFactory } from './core/actors'
import { World, IWorldConfig } from './core/world'
import { IActor, IWorld, IComponent } from './core/types'

export class Actor implements IActor<IComponents> {
  uuid: string
  components: IComponents

  static defaults: {}

  constructor(uuid: string) {
    this.uuid = uuid
    this.components = {}
  }
}

export const factory = new ActorFactory<IComponents>(componentClasses)
export const makeWorld = (worldConfig: IWorldConfig): World<IComponents> => {
  return new World<IComponents>(worldConfig, factory)
}


